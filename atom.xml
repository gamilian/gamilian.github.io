<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gamilian</title>
  <icon>https://www.gravatar.com/avatar/f5bfa57f814184c24e23ca676e581570</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-05-01T08:07:04.378Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gamilian</name>
    <email>gamilian26@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序（一）交换排序 c/c++与python实现</title>
    <link href="http://yoursite.com/2020/05/01/sort_1/"/>
    <id>http://yoursite.com/2020/05/01/sort_1/</id>
    <published>2020-05-01T07:41:18.000Z</published>
    <updated>2020-05-01T08:07:04.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><p>交换，指的是根据序列中两个关键字的比较结果来对换这两个记录在序列中的位置，主要有冒泡排序与快速排序。</p><h2 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h2><p><strong>冒泡排序的基本思想</strong>：从前往后或者从后往前，对相邻的两个元素进行比较，若逆序，则交换。每次冒泡排序都会让至少一个元素移动到它应该在的位置，重复n-1，就完成了对n个数据的排序。</p><p>如果对一组数据7，8，9，6，5，4，从小到大排序，第一次冒泡排序的详细过程如下所示：<br><img src="https://img-blog.csdnimg.cn/20200326124224477.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTY3Mjk1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">可以看出一次冒泡操作后，有一个元素已经移动到应该在的位置上了，经过n-1次这样的冒泡操作后，n-1个元素被移动到应该在的位置上了，剩下一个元素也自然在应该在位置上。</p><p>实际上，刚刚的冒泡过程还可以优化。当某次冒泡操作已经没有数据交换时，说明已经达到完全有序，不用再继续执行后续的冒泡操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 冒泡排序c实现，a表示数组，n表示数组大小</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: gamilian</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>) </span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="literal">false</span>;<span class="comment">// 提前退出冒泡循环的标志位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[j] &gt; a[j+<span class="number">1</span>]) &#123; <span class="comment">// 交换</span></span><br><span class="line">        <span class="keyword">int</span> tmp = a[j];</span><br><span class="line">       a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">        a[j+<span class="number">1</span>] = tmp;</span><br><span class="line">        flag = <span class="literal">true</span>;  <span class="comment">// 表示有数据交换      </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) </span><br><span class="line">    <span class="keyword">break</span>;  <span class="comment">// 没有数据交换，提前退出</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#冒泡排序python实现</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Author: gamilian</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(a)</span>:</span></span><br><span class="line"><span class="string">""" 冒泡排序 </span></span><br><span class="line"><span class="string">args:</span></span><br><span class="line"><span class="string">a: List[int]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">    length = len(a)</span><br><span class="line">    <span class="keyword">if</span> length &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        made_swap = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length - i - <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[j] &gt; a[j + <span class="number">1</span>]:</span><br><span class="line">                a[j], a[j + <span class="number">1</span>] = a[j + <span class="number">1</span>], a[j]</span><br><span class="line">                made_swap = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> made_swap:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong>算法的稳定性</strong>：在冒泡排序中，只有交换才可以改变两个元素的前后顺序。为了保证冒泡排序算法的稳定性，当有相邻的两个元素大小相等的时候，我们不做交换，相同大小的数据在排序前后不会改变顺序，所以<strong>冒泡排序是稳定的排序算法</strong>。</p><p><strong>空间复杂度</strong> ：冒泡的过程只涉及相邻数据的交换操作，只需要常量级的临时空间，所以它的<strong>空间复杂度为 O(1)</strong>，是一个原地排序算法。</p><p><strong>时间复杂度</strong>：最好情况下，要排序的数据已经是有序的了，我们只需要进行一次冒泡操作，就可以结束了，所以<strong>最好情况时间复杂度是 O(n)</strong>。而最坏的情况是，要排序的数据刚好是倒序排列的，我们需要进行 n -1次冒泡操作，所以<strong>最坏情况时间复杂度为 O(n^2)</strong>。而平均情况下的时间复杂度比较复杂，可以通过逆序度来计算。<br><strong>逆序度</strong>是数组中具有无序关系的元素对的个数。</p><blockquote><p>逆序元素对：a[i] &gt; a[j], 如果i &lt; j。</p></blockquote><p><strong>有序度</strong>是数组中具有有序关系的元素对的个数。</p><blockquote><p>有序元素对：a[i] &lt;= a[j], 如果i &lt; j。</p></blockquote><p>对于一个完全有序的数组，有序度就是 n<em>(n-1)/2。我们把这种完全有序的数组的有序度叫作*</em>满有序度<strong>。<br>同时，</strong>逆序度 = 满有序度 - 有序度**。</p><p>冒泡排序包含两个操作原子，比较和交换。每交换一次，有序度就加 1。不管算法怎么改进，交换次数总是确定的，即为逆序度，也就是n*(n-1)/2–初始有序度。</p><p>对于包含 n 个数据的数组进行冒泡排序，最坏情况下，初始状态n个数据逆序，有序度为 0，所以要进行 n<em>(n-1)/2 次交换。最好情况下，初始状态数据有序，有序度为 n</em>(n-1)/2，就不需要进行交换。平均情况下，需要 n<em>(n-1)/4 次交换操作，而比较操作肯定要比交换操作多，而复杂度的上限是 O(n^2)，所以*</em>平均情况下的时间复杂度就是 O(n^2)。**</p><h2 id="快速排序（Quick-sort）"><a href="#快速排序（Quick-sort）" class="headerlink" title="快速排序（Quick sort）"></a>快速排序（Quick sort）</h2><p><strong>快速排序的思想是基于分治思想的</strong>：  如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。</p><p>我们遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间。经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的。<br><img src="https://img-blog.csdnimg.cn/20200326161837890.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMTY3Mjk1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>根据分治、递归的处理思想，我们可以用递归排序下标从 p 到 q-1 之间的数据和下标从 q+1 到 r 之间的数据，直到区间缩小为 1，就说明所有的数据都有序了。</p><blockquote><p>递推公式：quick_sort(left…right) = quick_sort(left…pivot -1) + quick_sort(pivot +1… right)<br>终止条件：left &gt;= right</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//快排c实现</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Author: gamilian</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//对区间[left,right]划分，采用随机pivot</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = (round(<span class="number">1.0</span> * rand() / RAND_MAX * (right - left) + left));<span class="comment">//生成[left,right]内的随机数</span></span><br><span class="line"><span class="keyword">int</span> temp = A[left];<span class="comment">//交换A[p]与A[left]</span></span><br><span class="line">A[left] = A[p];</span><br><span class="line">A[p] = temp;</span><br><span class="line"><span class="keyword">int</span> pivot = A[left]; <span class="comment">//设置随机元素，即现在的第一个元素为pivot</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)&#123;<span class="comment">//只要left与right不相遇</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; A[right] &gt; pivot) </span><br><span class="line">right--;<span class="comment">//只要right比pivot大，就一直左移</span></span><br><span class="line">A[left] = A[right];<span class="comment">//将比pivot小的元素移到左边</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right &amp;&amp; A[left] &lt;= pivot) </span><br><span class="line">left++;<span class="comment">//只要left比pivot小，就一直右移</span></span><br><span class="line">A[right] = A[left];<span class="comment">//将比pivot大的元素移到右边</span></span><br><span class="line">&#125;</span><br><span class="line">A[left] = pivot;<span class="comment">//pivot放在最终left与right相遇的位置</span></span><br><span class="line"><span class="keyword">return</span> left;<span class="comment">//返回存放pivot的下标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// A是数组，left与right初值为序列首尾下标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> A[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;<span class="comment">//当前区间长度超过1</span></span><br><span class="line"><span class="keyword">int</span> pivot = Partition(A, left, right);<span class="comment">//划分区间</span></span><br><span class="line">quick_sort(A, left, pivot - <span class="number">1</span>);<span class="comment">//对于左子区间快排</span></span><br><span class="line">quick_sort(A, pivot + <span class="number">1</span>, right);<span class="comment">//对右子区间快排</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快排python实现,划分时用swap</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Author: gamilian</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="string">""" 快速排序 </span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            a: List[int]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    length = len(a)</span><br><span class="line">    quick_sort_between(a, <span class="number">0</span>, length - <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_between</span><span class="params">(a, left, right)</span>:</span></span><br><span class="line">    <span class="string">""" 将a的[left,right]区间快排 </span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            a: List[int]</span></span><br><span class="line"><span class="string">            left: int</span></span><br><span class="line"><span class="string">            right: int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        pivot = partition(a, left, right)  </span><br><span class="line">        quick_sort_between(a, left, pivot - <span class="number">1</span>)</span><br><span class="line">        quick_sort_between(a, pivot + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(a, left, right)</span>:</span></span><br><span class="line">    <span class="string">""" 划分区间 </span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            a: List[int]</span></span><br><span class="line"><span class="string">            left: int</span></span><br><span class="line"><span class="string">            right: int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 随机pivot</span></span><br><span class="line">    temp = random.randint(left, right)</span><br><span class="line">    a[left], a[temp] = a[temp], a[left]</span><br><span class="line">    pivot, j = a[left], left</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(left + <span class="number">1</span>, right + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> a[i] &lt;= pivot:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            a[j], a[i] = a[i], a[j]  <span class="comment"># swap</span></span><br><span class="line">    a[left], a[j] = a[j], a[left]</span><br><span class="line">    <span class="keyword">return</span> j</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 双向快排python实现,划分时用swap</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">    Author: gamilian</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort_twoway</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="string">""" 双向排序 </span></span><br><span class="line"><span class="string">        args:</span></span><br><span class="line"><span class="string">            a: List[int]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 双向排序: 提高非随机输入的性能</span></span><br><span class="line">    <span class="comment"># 不需要额外的空间,在待排序数组本身内部进行排序</span></span><br><span class="line">    <span class="comment"># 基准值通过random随机选取</span></span><br><span class="line">    <span class="comment"># 入参: 待排序数组, 数组开始索引 0, 数组结束索引 len(a)-1</span></span><br><span class="line">    length = len(a)</span><br><span class="line">    <span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> length &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quick_sort_twoway_between</span><span class="params">(a, left, right)</span>:</span></span><br><span class="line">        <span class="comment"># 小数组排序i可以用插入或选择排序</span></span><br><span class="line">        <span class="comment"># if right-left &lt; 50 : return a</span></span><br><span class="line">        <span class="comment"># 基线条件: left index = right index; 也就是只有一个值的区间</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">return</span> a</span><br><span class="line">        <span class="comment"># 随机选取基准值, 并将基准值替换到数组第一个元素</span></span><br><span class="line">        temp = random.randint(left, right)</span><br><span class="line">        a[left], a[temp] = a[temp], a[left]</span><br><span class="line">        pivot = a[left]</span><br><span class="line">        <span class="comment"># 缓存边界值, 从上下边界同时排序</span></span><br><span class="line">        i, j = left, right</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 第一个元素是基准值,所以要跳过</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 在小区间中, 进行排序</span></span><br><span class="line">            <span class="comment"># 从下边界开始寻找大于基准值的索引</span></span><br><span class="line">            <span class="keyword">while</span> i &lt;= right <span class="keyword">and</span> a[i] &lt;= pivot:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># 从上边界开始寻找小于基准值的索引</span></span><br><span class="line">            <span class="comment"># 因为j肯定大于i, 所以索引值肯定在小区间中</span></span><br><span class="line">            <span class="keyword">while</span> a[j] &gt; pivot:</span><br><span class="line">                j -= <span class="number">1</span></span><br><span class="line">            <span class="comment"># 如果小索引大于等于大索引, 说明排序完成, 退出排序</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= j:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            a[i], a[j] = a[j], a[i]</span><br><span class="line">        <span class="comment"># 将基准值的索引从下边界调换到索引分割点</span></span><br><span class="line">        a[left], a[j] = a[j], a[left]</span><br><span class="line">        quick_sort_twoway_between(a, left, j - <span class="number">1</span>)</span><br><span class="line">        quick_sort_twoway_between(a, j + <span class="number">1</span>, right)</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quick_sort_twoway_between(a, <span class="number">0</span>, length - <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>算法的稳定性</strong>：因为分区的过程涉及交换操作，如果数组中有两个相同的元素，在经过第一次分区操作之后，两个相同元素的相对先后顺序就会改变。所以，<strong>快速排序并不是一个稳定的排序算法</strong>。</p><p><strong>空间复杂度</strong>：如果算上递归工作栈，由于快排是递归的，需要借助一个递归工作栈来保存每层递归调用的必要信息，其容量与递归调用的最大深度一致。<strong>快排最好情况空间复杂度为 O(nlogn)</strong>，最坏情况，要进行n-1次递归调用，即<strong>快排最坏情况空间复杂度为 O(n)</strong>，<strong>快排平均情况空间复杂度为 O(nlogn)</strong>。<br>如果不算上递归工作栈，则<strong>快排空间复杂度为 O(1)</strong>，是一个原地排序算法。</p><p><strong>时间复杂度</strong>：如果每次分区操作，都能正好把数组分成大小接近相等的两个小区间，那快排的时间复杂度递推求解公式跟归并是相同的。所以，<strong>快排最好情况时间复杂度为 O(nlogn)</strong>。</p><blockquote><p>T(1) = C；   n=1时，只需要常量级的执行时间，所以表示为C。T(n) = 2*T(n/2) + n； n&gt;1</p></blockquote><p>如果我们每次选择最后一个元素作为 pivot，那每次分区得到的两个区间都是不均等的。我们需要进行大约 n 次分区操作，才能完成快排的整个过程。每次分区我们平均要扫描大约 n/2 个元素，所以，<strong>快排最坏情况时间复杂度为 O(n^2)</strong>。</p><p>假设每次分区操作都将区间分成大小为 9:1 的两个小区间。</p><blockquote><p>T(1) = C；   n=1时，只需要常量级的执行时间，所以表示为C。<br>T(n) = T(n/10) + T(9*n/10) + n； n&gt;1</p></blockquote><p>所以，<strong>快排平均时间复杂度为O(nlogn)</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;交换排序&quot;&gt;&lt;a href=&quot;#交换排序&quot; class=&quot;headerlink&quot; title=&quot;交换排序&quot;&gt;&lt;/a&gt;交换排序&lt;/h1&gt;&lt;p&gt;交换，指的是根据序列中两个关键字的比较结果来对换这两个记录在序列中的位置，主要有冒泡排序与快速排序。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="c/c++" scheme="http://yoursite.com/tags/c-c/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/18/hello-world/"/>
    <id>http://yoursite.com/2017/08/18/hello-world/</id>
    <published>2017-08-18T07:41:18.000Z</published>
    <updated>2020-05-01T07:56:22.406Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="标签1" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE1/"/>
    
  </entry>
  
</feed>
